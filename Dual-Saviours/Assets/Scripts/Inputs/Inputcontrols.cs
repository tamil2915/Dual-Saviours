//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Inputs/Inputcontrols.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputcontrols : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputcontrols()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputcontrols"",
    ""maps"": [
        {
            ""name"": ""PrinceActionMap"",
            ""id"": ""dcc9ea13-e11c-41b5-a9f0-c233017c5cbf"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""835c5c9c-c590-43e9-be10-2a4c15e35a63"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Act"",
                    ""type"": ""Button"",
                    ""id"": ""0af47c13-4b27-4b8e-84c6-5eb77d195007"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""52754b18-d9e7-4643-a999-6881f3a285fd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""48085824-3ebb-4ad2-a6a1-18faff464e38"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0ddd3e4b-b4b9-425e-9bd0-d44fd4ec3c13"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""832e50be-74f5-423b-b136-93af91199a6e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d1b82b77-98a6-48a8-b153-ce80fedc5df9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ba665973-94fc-4751-ac35-629f0494b83c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Act"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PrincessActionMap"",
            ""id"": ""4d1a0a80-37b0-4973-984a-98ecbecfd0f5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""87b08cbc-ed36-4861-af82-ae496a29b5da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Act"",
                    ""type"": ""Button"",
                    ""id"": ""c0adb2cc-599d-4098-9f90-1d1356e568b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""43afe9b2-2723-4583-81ee-71a7c86d875e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cabc6fa8-181c-4108-be5c-a42dc98a63b5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c1e84c22-2162-460e-963f-4c33f3eac834"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""00db5961-cd80-4f68-9962-b31267f0fa8b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""40f4c960-05fe-44ce-a0a6-700406f95eb5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6b781c2c-dba8-4f18-b9c0-130dec19a748"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Act"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PrinceActionMap
        m_PrinceActionMap = asset.FindActionMap("PrinceActionMap", throwIfNotFound: true);
        m_PrinceActionMap_Move = m_PrinceActionMap.FindAction("Move", throwIfNotFound: true);
        m_PrinceActionMap_Act = m_PrinceActionMap.FindAction("Act", throwIfNotFound: true);
        // PrincessActionMap
        m_PrincessActionMap = asset.FindActionMap("PrincessActionMap", throwIfNotFound: true);
        m_PrincessActionMap_Move = m_PrincessActionMap.FindAction("Move", throwIfNotFound: true);
        m_PrincessActionMap_Act = m_PrincessActionMap.FindAction("Act", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PrinceActionMap
    private readonly InputActionMap m_PrinceActionMap;
    private IPrinceActionMapActions m_PrinceActionMapActionsCallbackInterface;
    private readonly InputAction m_PrinceActionMap_Move;
    private readonly InputAction m_PrinceActionMap_Act;
    public struct PrinceActionMapActions
    {
        private @Inputcontrols m_Wrapper;
        public PrinceActionMapActions(@Inputcontrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PrinceActionMap_Move;
        public InputAction @Act => m_Wrapper.m_PrinceActionMap_Act;
        public InputActionMap Get() { return m_Wrapper.m_PrinceActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PrinceActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPrinceActionMapActions instance)
        {
            if (m_Wrapper.m_PrinceActionMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PrinceActionMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PrinceActionMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PrinceActionMapActionsCallbackInterface.OnMove;
                @Act.started -= m_Wrapper.m_PrinceActionMapActionsCallbackInterface.OnAct;
                @Act.performed -= m_Wrapper.m_PrinceActionMapActionsCallbackInterface.OnAct;
                @Act.canceled -= m_Wrapper.m_PrinceActionMapActionsCallbackInterface.OnAct;
            }
            m_Wrapper.m_PrinceActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Act.started += instance.OnAct;
                @Act.performed += instance.OnAct;
                @Act.canceled += instance.OnAct;
            }
        }
    }
    public PrinceActionMapActions @PrinceActionMap => new PrinceActionMapActions(this);

    // PrincessActionMap
    private readonly InputActionMap m_PrincessActionMap;
    private IPrincessActionMapActions m_PrincessActionMapActionsCallbackInterface;
    private readonly InputAction m_PrincessActionMap_Move;
    private readonly InputAction m_PrincessActionMap_Act;
    public struct PrincessActionMapActions
    {
        private @Inputcontrols m_Wrapper;
        public PrincessActionMapActions(@Inputcontrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PrincessActionMap_Move;
        public InputAction @Act => m_Wrapper.m_PrincessActionMap_Act;
        public InputActionMap Get() { return m_Wrapper.m_PrincessActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PrincessActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPrincessActionMapActions instance)
        {
            if (m_Wrapper.m_PrincessActionMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PrincessActionMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PrincessActionMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PrincessActionMapActionsCallbackInterface.OnMove;
                @Act.started -= m_Wrapper.m_PrincessActionMapActionsCallbackInterface.OnAct;
                @Act.performed -= m_Wrapper.m_PrincessActionMapActionsCallbackInterface.OnAct;
                @Act.canceled -= m_Wrapper.m_PrincessActionMapActionsCallbackInterface.OnAct;
            }
            m_Wrapper.m_PrincessActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Act.started += instance.OnAct;
                @Act.performed += instance.OnAct;
                @Act.canceled += instance.OnAct;
            }
        }
    }
    public PrincessActionMapActions @PrincessActionMap => new PrincessActionMapActions(this);
    public interface IPrinceActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAct(InputAction.CallbackContext context);
    }
    public interface IPrincessActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAct(InputAction.CallbackContext context);
    }
}
